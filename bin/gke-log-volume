#!/usr/bin/env bash

# options
#  -d/--duration number of seconds to wait for log activity
#  -p/--project the google project name, default to gcloud config
#  -z/--zone the google zone name, default to gcloud config
#  -e/--exclude regex for logs to exclude
#  -l/--include regex for logs to include
#  -i/--internal-ip use the node's internal ip address
#  -o/--active-only don't list logs with no activity in the test period
#  -n/--node-only only show the node totals
#  -q/--quiet omit progress messaging and headers

node=
project=
zone=
exclude=
include=.*
quiet=false
internal_ip=false
internal_ip_arg=
duration=30
active_only=false
node_only=false
log_path=/var/log/containers/

# parse out the options
OPTS=$(getopt -o d:p:z:e:l:ianq --long duration:,project:,zone:,exclude:,include:,internal-ip,active-only,node-only,quiet -- "$@")
if [[ $? -ne 0 ]]; then
    echo "Error: failed to parse command line options."
    exit 1
fi

eval set -- "$OPTS"
while true; do
  case "$1" in
    -d|--duration)
        duration="$2"
        shift; shift
        ;;
    -p|--project)
        project="$2"
        shift; shift
        ;;
    -z|--zone)
        zone="$2"
        shift; shift
        ;;
    -e|--exclude)
        exclude="$2"
        shift; shift
        ;;
    -l|--include)
        include="$2"
        shift; shift
        ;;
    -i|--internal-ip)
        internal_ip=true
        shift
        ;;
    -a|--active-only)
        active_only=true
        shift
        ;;
    -n|--node-only)
        node_only=true
        shift
        ;;
    -q|--quiet)
        quiet=true
        shift
        ;;
    --)
        shift
        if [ ! -z "$1" ]; then
            node="$1"
        fi
        break
        ;;
    *)
        echo "Error: unknown option '${1}'"
#        help 1
        ;;
  esac
done

project=${project:-$(gcloud config get-value core/project)}
zone=${zone:-$(gcloud config get-value compute/zone)}
if [ "$internal_ip" == "true" ]; then
  internal_ip_arg="--internal-ip"
fi
gcp_ssh_cmd="gcloud compute --quiet ssh $internal_ip_arg $node --project $project --zone $zone "

if [ "$quiet" != "true" ]; then echo "Track log volume on $node over ${duration}s ..."; fi
$gcp_ssh_cmd --command="\
  if [ \"$quiet\" != \"true\" ]; then echo \"Snapshot logs...\"; fi;\
  start_data=\$(\
    for log in ${log_path}*.log; do\
      if [[ ! \$log =~ $include ]]; then\
        continue;\
      fi;\
      if [[ ! -z \"$exclude\" && \$log =~ ${exclude:-xxx} ]]; then\
        continue;\
      fi;\
      echo -n \"\$log+\$(sudo cat \$log | wc -l)+\$(sudo du -L --bytes \$log | awk '{print \$1}') \";\
    done\
  );\
  if [ \"$quiet\" != \"true\" ]; then echo \"Sleeping $duration seconds...\"; fi;\
  sleep $duration;\
  if [ \"$quiet\" != \"true\" ]; then echo \"Measure log volume...\"; fi;\
  node_lines_written=0;\
  node_bytes_written=0;\
  for log_line in \$start_data; do\
    file=\$(echo -n \$log_line | cut -d'+' -f1);\
    start_lines=\$(echo -n \$log_line | cut -d'+' -f2);\
    start_size=\$(echo -n \$log_line | cut -d'+' -f3);\
    end_lines=\$(sudo cat \$file | wc -l);\
    end_size=\$(sudo du -L --bytes \$file | awk '{print \$1}');\
    lines_written=\$((\$end_lines-\$start_lines));\
    bytes_written=\$((\$end_size-\$start_size));\
    if [[ \"$active_only\" == \"true\" && \$lines_written -eq 0 ]]; then\
      continue;\
    fi;\
    node_lines_written=\$((\$node_lines_written+\$lines_written));\
    node_bytes_written=\$((\$node_bytes_written+\$bytes_written));\
    if [ \"$node_only\" == \"true\" ]; then\
      continue;\
    fi;\
    echo \${file/\"$log_path\"/} \$lines_written \$bytes_written \$((\$lines_written/$duration)) \$((\$bytes_written/$duration));\
  done;\
  echo $node \$node_lines_written \$node_bytes_written \$((\$node_lines_written/$duration)) \$((\$node_bytes_written/$duration));\
  " 2>/dev/null
